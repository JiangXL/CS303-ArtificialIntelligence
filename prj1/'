\documentclass[conference,compsoc]{IEEEtran}

% *** CITATION PACKAGES ***
%
\ifCLASSOPTIONcompsoc
  % IEEE Computer Society needs nocompress option
  % requires cite.sty v4.0 or later (November 2003)
  \usepackage[nocompress]{cite}
\else
  % normal IEEE
  \usepackage{cite}
\fi

% *** GRAPHICS RELATED PACKAGES ***
%
\ifCLASSINFOpdf
  % \usepackage[pdftex]{graphicx}
  % declare the path(s) where your graphic files are
  % \graphicspath{{../pdf/}{../jpeg/}}
  % and their extensions so you won't have to specify these with
  % every instance of \includegraphics
  % \DeclareGraphicsExtensions{.pdf,.jpeg,.png}
\else
  % or other class option (dvipsone, dvipdf, if not using dvips). graphicx
  % will default to the driver specified in the system graphics.cfg if no
  % driver is specified.
  % \usepackage[dvips]{graphicx}
  % declare the path(s) where your graphic files are
  % \graphicspath{{../eps/}}
  % and their extensions so you won't have to specify these with
  % every instance of \includegraphics
  % \DeclareGraphicsExtensions{.eps}
\fi

\usepackage{amsmath}
\usepackage{algorithm, algorithmic}
\renewcommand{\algorithmicrequire}{\textbf{Input:}}
\renewcommand{\algorithmicensure}{\textbf{Output:}}
\usepackage{array}
\usepackage{url}
% correct bad hyphenation here
\hyphenation{op-tical net-works semi-conduc-tor}


\begin{document}
\title{Project 1: Gomoku}

% author names and affiliations
% use a multiple column layout for up to three different
% affiliations
\author{\IEEEauthorblockN{Yuejian Mo  11510511}
\IEEEauthorblockA{Department of Biology\\
Southern University of Science and Technology\\
Email: 11510511@mail.sustc.edu.cn}}

% make the title area
\maketitle


\IEEEpeerreviewmaketitle

\section{Preliminaries}
This project is doing some simple implementations on Gomoku. Gomoku, also called 
Five in a Row, is an abstract strategy board game. It is traditionally played 
with Go pieces (black and white stones) on a Go board, using 15x15 of the 19x19
grid intersection.[1] Gomoku has less complicity than Go, which has encouraged
Deep Mind to develop powerful AI engine AlphaGo in 2016. So Gomoku will be a
better particle for beginner. Design of Gomoku AI in this project try to
follow the minMax tree with alpha-beta punching, which powered AI Deep Blue to
challenge top chess player successfully in the first time.

\subsection{Software}
This project is written by Python 3.7 with editor Atom and Vim. Numpy library
is being used.


\subsection{Algorithm}
Depth-first search in the form of minMax tree with alpha-beta punching is used.
The method being used is recursion. I defined three group of functions in order
to find out next chess position from input chess board. Including given
functions, here are nine functions in go.py, and one is for testing.


\section{Methodology}
Different chess layout present different chance to win. For example, live-four
and double-three must lead to success. So I evaluate the score of possible
layout in final level of DFS. For every layout, I scan each line in vertical,
horizontal and diagonal to calculate score and sum three together valued as
whole chess layout score. Then, all score were judged by minMax tree to found
out best choose position. To speed up minMax tree, alpha-beta punching was used
to reduce the number of node to expand.

\subsection{Representation}
Some main data are maintain during process: color, candidate list, chessboard.
Others data would be specified inside functions.

\begin{itemize}
  \item color: The chess color of current AI
  \item candidate list: Candidate point coordination, nested list. Final tuple in
  list would be return as final choice.
  \item chessboard: The chessboard  layout from player.
\end{itemize}


\subsection{Architecture}
Here list all functions in given class AI:
\begin{itemize}
  \item Given function:
  \begin{itemize}
    \item \_\_init\_\_: initial function, including global variables.
    \item first\_chess: if AI is black chess, this function run.
    \item go: receive current chessboard layout, and return AI's choice.
  \end{itemize}
  \item Self-defined function:
    \begin{itemize}
      \item alphaBeta: minMax tree and alpha-beta punching.
      \item genNext: generate available position on chessboard.
      \item evaluateState: evaluate current chessboard score of black or white
      \item evaluateLine: evaluate current line score of black or white
      \item mapValue: map different chess layout in single line to score
    \end{itemize}
\end{itemize}
The class AI would be executed in test platform.


\subsection{Detail of Algorithm}
Here describes some vital functions.
\begin{itemize}
  \item alphaBeta: use minMax tree with alpha-beta punching to choose best position
    \begin{algorithm}[H]
     \caption{alphaBeta}
     \begin{algorithmic}[1]
     \renewcommand{\algorithmicrequire}{\textbf{Input:}}
     \renewcommand{\algorithmicensure}{\textbf{Output:}}
     \REQUIRE $source\_chessboard, depth, alpha, beta, chess\_color$
     \ENSURE  $max\_value$
     \IF {($depth == 0$)}
     \STATE \RETURN  evaluateState($source\_chessboard$)
     \ENDIF

     \STATE $child\_chessboard\leftarrow source\_chessboard$
     \STATE $cadidate\_points\leftarrow genNext(child\_chessboard)$
     \STATE $max\_value\leftarrow alpha$
     \STATE $max\_point\leftarrow candidate\_points[0]$ 

     \FOR {$point$ in  $candidate\_points$}
     \STATE $child\_chessboard[point]\leftarrow chess\_color$ \COMMENT{action}
     \STATE $value \leftarrow -alphaBeta(child\_chessboard, depth-1,-beta,-alpha, -chess\_color)$ \COMMENT{recursion}
     \STATE $child\_chessboard[point]\leftarrow 0$ \COMMENT{undo action}
     \IF {($value > max\_value$)}
     \STATE $max\_value \leftarrow value$
     \STATE $max\_point \leftarrow point$
        \IF {($max_value >= beta$)}
          \STATE break
        \ENDIF
     \ENDIF
     \ENDFOR
     \IF{(depth == initial\_depth)}
     \STATE $candidate\_list.append(max\_point)$ \COMMENT{add max value point to candidate list}
     \ENDIF
     \RETURN $max\_value$
     \end{algorithmic}
   \end{algorithm}

   \item genNext: generate most possible position
     \begin{algorithm}[H]
     \caption{genNext}
     \begin{algorithmic}[2]
     \renewcommand{\algorithmicrequire}{\textbf{Input:}}
     \renewcommand{\algorithmicensure}{\textbf{Output:}}
     \REQUIRE $chess\_chessboard, chess\_color$
     \ENSURE  $score$
     \STATE $pos \leftarrow empty position$
     \STATE $neighbor\_points \leftarrow []$ \COMMENT{initial}
     \FOR {$point$ in $pos$ }
       \IF{($point$ has any neighbor in 4 direction)}
       \STATE add $point$ to $neighbor\_points$
       \STATE break
       \ENDIF
     \ENDFOR
     \RETURN $neighbor\_points$
     \end{algorithmic}
     \end{algorithm}

  \item evaluateState: return current chessboard layout score
    \begin{algorithm}[H]
     \caption{evaluateState}
     \begin{algorithmic}[3]
     \renewcommand{\algorithmicrequire}{\textbf{Input:}}
     \renewcommand{\algorithmicensure}{\textbf{Output:}}
     \REQUIRE $chessboard, chess\_color$
     \ENSURE  $score$
     \STATE $score \leftarrow 0$ \COMMENT{Initial $score$}
     \FOR {every $line$ in horizontal ,vertical, diagonal}
       \STATE $score \leftarrow score + evaluateLine(line, chess\_color$)
     \ENDFOR
     \RETURN $score$
     \end{algorithmic}
     \end{algorithm}
 
   \item evaluateLine: get single line score
     \begin{algorithm}[H]
     \caption{evaluateLine}
     \begin{algorithmic}[4]
     \renewcommand{\algorithmicrequire}{\textbf{Input:}}
     \renewcommand{\algorithmicensure}{\textbf{Output:}}
     \REQUIRE $chess_line, chess\_color$
     \ENSURE  $score$
     \STATE $score \leftarrow 0$
     \STATE $continue\_point \leftarrow 1$
     \STATE $blcok\_point \leftarrow 0$
     \WHILE {$point$ is in $line$}
     \STATE statements..
     \IF {($i \ne 0$)}
     \STATE statement..
     \ENDIF
     \ENDWHILE
     \RETURN $score$
     \end{algorithmic}
     \end{algorithm}

\end{itemize}


\section{Empirical Verification}
Empirical verification is compared with given test\_code.py and public test
platform.

\subsection{Design}
Successfully to evaluate chessboard score currently. But, unfortunately, this
alphaBeta function only work right in depth of one and two. When depth is three
and more than three, it run in wrong and slow.

I defined a variable $debug$ in $\_\_init\_\_$ to print of solving chessboard
layout, final chosen position and some other variables. Sometimes, I use
$input()$ to pause program. Because so many data are printed in terminal, I
output printed information to file as $python code\_test.py >> log$.

\subsection{Data and data structure}
Using data provided by code\_test.py to test.

Numpy matrix is used widely.

\subsection{Performance}
When only work in one layer, it is fast but low chance to win. More depth is
slow.

\subsection{Result}
Pass all simple case, but fail to some advantage case.

\subsection{Analysis}



% use section* for acknowledgment
\ifCLASSOPTIONcompsoc
  % The Computer Society usually uses the plural form
  \section*{Acknowledgments}
\else
  % regular IEEE prefers the singular form
  \section*{Acknowledgment}
\fi


% can use a bibliography generated by BibTeX as a .bbl file
% BibTeX documentation can be easily obtained at:
% http://mirror.ctan.org/biblio/bibtex/contrib/doc/
% The IEEEtran BibTeX style support page is at:
% http://www.michaelshell.org/tex/ieeetran/bibtex/
\bibliographystyle{IEEEtran}
% argument is your BibTeX string definitions and bibliography database(s)
%\bibliography{IEEEabrv,../bib/paper}
%
% <OR> manually copy in the resultant .bbl file
% set second argument of \begin to the number of references
% (used to reserve space for the reference number labels box)
\begin{thebibliography}{1}
\bibitem{reference} xxx
%\bibligraphy{IEEEtran, refer.bib} 
\end{thebibliography}





% that's all folks
\end{document}


